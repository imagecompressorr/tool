
import React, { useState, useRef, useCallback, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Slider } from '@/components/ui/slider';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { Download, Upload, Image as ImageIcon, Zap, Shield, Clock, FileImage, Star, Users, Smartphone, Lock } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface CompressedImage {
  originalFile: File;
  compressedBlob: Blob;
  originalSize: number;
  compressedSize: number;
  compressionRatio: number;
  dataUrl: string;
}

interface AdSenseAdProps {
  adSlot: string;
  adFormat?: string;
  fullWidthResponsive?: boolean;
  className?: string;
}

const AdSenseAd: React.FC<AdSenseAdProps> = ({
  adSlot,
  adFormat = "auto",
  fullWidthResponsive = true,
  className = ""
}) => {
  useEffect(() => {
    try {
      const adsbygoogle = (window as any).adsbygoogle || [];
      adsbygoogle.push({});
    } catch (error) {
      console.error('AdSense error:', error);
    }
  }, []);

  return (
    <div className={`adsense-container ${className}`}>
      <ins
        className="adsbygoogle"
        style={{ display: 'block' }}
        data-ad-client="ca-pub-XXXXXXXXXXXXXXXXX"
        data-ad-slot={adSlot}
        data-ad-format={adFormat}
        data-full-width-responsive={fullWidthResponsive.toString()}
      />
    </div>
  );
};

const Index = () => {
  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);
  const [compressedImages, setCompressedImages] = useState<CompressedImage[]>([]);
  const [quality, setQuality] = useState([0.8]);
  const [isCompressing, setIsCompressing] = useState(false);
  const [progress, setProgress] = useState(0);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  const handleFileSelect = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || []);
    const validFiles = files.filter(file => {
      if (file.type.startsWith('image/')) {
        return true;
      }
      toast({
        title: "Invalid file type",
        description: `${file.name} is not a valid image file.`,
        variant: "destructive",
      });
      return false;
    });
    
    setSelectedFiles(validFiles);
    setCompressedImages([]);
  }, [toast]);

  const compressImage = useCallback((file: File, quality: number): Promise<CompressedImage> => {
    return new Promise((resolve, reject) => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const img = new Image();
      
      img.onload = () => {
        const maxWidth = 1920;
        const maxHeight = 1080;
        let { width, height } = img;
        
        if (width > maxWidth || height > maxHeight) {
          const ratio = Math.min(maxWidth / width, maxHeight / height);
          width *= ratio;
          height *= ratio;
        }
        
        canvas.width = width;
        canvas.height = height;
        
        ctx?.drawImage(img, 0, 0, width, height);
        
        canvas.toBlob(
          (blob) => {
            if (blob) {
              const compressionRatio = ((file.size - blob.size) / file.size) * 100;
              const reader = new FileReader();
              reader.onload = () => {
                resolve({
                  originalFile: file,
                  compressedBlob: blob,
                  originalSize: file.size,
                  compressedSize: blob.size,
                  compressionRatio,
                  dataUrl: reader.result as string,
                });
              };
              reader.readAsDataURL(blob);
            } else {
              reject(new Error('Failed to compress image'));
            }
          },
          file.type === 'image/png' ? 'image/png' : 'image/jpeg',
          quality
        );
      };
      
      img.onerror = () => reject(new Error('Failed to load image'));
      img.src = URL.createObjectURL(file);
    });
  }, []);

  const handleCompress = useCallback(async () => {
    if (selectedFiles.length === 0) {
      toast({
        title: "No files selected",
        description: "Please select at least one image to compress.",
        variant: "destructive",
      });
      return;
    }

    setIsCompressing(true);
    setProgress(0);
    
    try {
      const compressed: CompressedImage[] = [];
      
      for (let i = 0; i < selectedFiles.length; i++) {
        const file = selectedFiles[i];
        const compressedImage = await compressImage(file, quality[0]);
        compressed.push(compressedImage);
        setProgress(((i + 1) / selectedFiles.length) * 100);
      }
      
      setCompressedImages(compressed);
      
      toast({
        title: "Compression complete!",
        description: `Successfully compressed ${compressed.length} image(s).`,
      });
    } catch (error) {
      toast({
        title: "Compression failed",
        description: "An error occurred while compressing the images.",
        variant: "destructive",
      });
    } finally {
      setIsCompressing(false);
    }
  }, [selectedFiles, quality, compressImage, toast]);

  const downloadImage = useCallback((compressedImage: CompressedImage) => {
    const url = URL.createObjectURL(compressedImage.compressedBlob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `compressed_${compressedImage.originalFile.name}`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }, []);

  const downloadAll = useCallback(() => {
    compressedImages.forEach(downloadImage);
  }, [compressedImages, downloadImage]);

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const features = [
    {
      icon: <Zap className="h-8 w-8 text-blue-600" />,
      title: "Fast Compression",
      description: "Lightning-fast image compression powered by advanced algorithms."
    },
    {
      icon: <Shield className="h-8 w-8 text-green-600" />,
      title: "Privacy Protected",
      description: "All processing happens in your browser. Your images never leave your device."
    },
    {
      icon: <Smartphone className="h-8 w-8 text-purple-600" />,
      title: "Mobile Friendly",
      description: "Works perfectly on all devices - desktop, tablet, and mobile."
    },
    {
      icon: <Download className="h-8 w-8 text-orange-600" />,
      title: "Batch Processing",
      description: "Compress multiple images at once to save time and effort."
    },
    {
      icon: <Clock className="h-8 w-8 text-red-600" />,
      title: "Instant Results",
      description: "Get compressed images in seconds with real-time progress tracking."
    },
    {
      icon: <Lock className="h-8 w-8 text-indigo-600" />,
      title: "Secure & Free",
      description: "100% free to use with no registration required. Completely secure."
    }
  ];

  const faqs = [
    {
      question: "How does the image compression work?",
      answer: "Our tool uses advanced algorithms to reduce image file sizes while maintaining visual quality. The compression happens entirely in your browser, ensuring your privacy and security."
    },
    {
      question: "What image formats are supported?",
      answer: "We support all major image formats including JPEG, PNG, WebP, and more. The tool automatically detects the format and applies the best compression technique."
    },
    {
      question: "Is there a limit on file size or number of images?",
      answer: "There's no strict limit on the number of images you can compress. However, very large files (over 50MB) may take longer to process depending on your device's capabilities."
    },
    {
      question: "Are my images stored on your servers?",
      answer: "No, absolutely not! All image processing happens locally in your browser. Your images never leave your device, ensuring complete privacy and security."
    },
    {
      question: "Can I adjust the compression quality?",
      answer: "Yes! You can adjust the quality level from 10% to 100% using our intuitive slider. Lower percentages result in smaller file sizes but may reduce image quality."
    },
    {
      question: "Is this tool free to use?",
      answer: "Yes, our image compression tool is completely free to use with no registration required. There are no hidden fees or limitations on usage."
    },
    {
      question: "Will compressed images lose quality?",
      answer: "Our smart compression algorithms are designed to minimize quality loss. You can control the balance between file size and quality using the quality slider."
    },
    {
      question: "Can I use this tool on mobile devices?",
      answer: "Absolutely! Our tool is fully responsive and works great on smartphones, tablets, and desktop computers across all modern browsers."
    }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100">
      {/* Header */}
      <header className="border-b bg-white/90 backdrop-blur-md sticky top-0 z-50 shadow-sm">
        <div className="container mx-auto px-4 lg:px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="bg-gradient-to-r from-blue-600 to-indigo-600 p-3 rounded-xl shadow-lg">
                <ImageIcon className="h-6 w-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl lg:text-2xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent">
                  Image Compressor
                </h1>
                <p className="text-sm text-gray-500 hidden sm:block">Free Online Tool</p>
              </div>
            </div>
            <div className="flex items-center space-x-3">
              <Badge variant="secondary" className="hidden sm:flex items-center gap-1 bg-green-100 text-green-700 border-green-200">
                <Star className="h-3 w-3" />
                Free Forever
              </Badge>
              <Badge variant="outline" className="hidden md:flex items-center gap-1">
                <Users className="h-3 w-3" />
                1M+ Users
              </Badge>
            </div>
          </div>
        </div>
      </header>

      <main className="container mx-auto px-4 lg:px-6 py-8 lg:py-12">
        {/* Hero Section */}
        <section className="text-center py-12 lg:py-20 mb-16">
          <div className="max-w-5xl mx-auto">
            <h1 className="text-4xl md:text-5xl lg:text-7xl font-bold bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600 bg-clip-text text-transparent mb-6 lg:mb-8 leading-tight">
              Compress Images Online
            </h1>
            <p className="text-lg md:text-xl lg:text-2xl text-gray-600 mb-8 lg:mb-12 max-w-3xl mx-auto leading-relaxed">
              Reduce image file sizes by up to 90% while maintaining excellent quality. 
              Fast, secure, and completely free.
            </p>
            <div className="flex flex-wrap gap-3 lg:gap-4 justify-center items-center mb-8 lg:mb-12">
              <Badge variant="secondary" className="px-4 py-2 text-sm lg:text-base bg-blue-100 text-blue-700 border-blue-200">
                <Zap className="h-4 w-4 mr-2" />
                Lightning Fast
              </Badge>
              <Badge variant="secondary" className="px-4 py-2 text-sm lg:text-base bg-purple-100 text-purple-700 border-purple-200">
                <ImageIcon className="h-4 w-4 mr-2" />
                All Formats
              </Badge>
              <Badge variant="secondary" className="px-4 py-2 text-sm lg:text-base bg-green-100 text-green-700 border-green-200">
                <Shield className="h-4 w-4 mr-2" />
                100% Secure
              </Badge>
            </div>
            
            {/* Top Ad Space */}
            <div className="my-8 lg:my-12">
              <AdSenseAd 
                adSlot="1234567890" 
                className="max-w-2xl mx-auto"
              />
            </div>
          </div>
        </section>

        {/* Main Tool */}
        <section className="mb-16 lg:mb-24">
          <div className="space-y-6 lg:space-y-8 max-w-6xl mx-auto">
            {/* Upload Section */}
            <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm">
              <CardHeader className="pb-4">
                <CardTitle className="flex items-center gap-3 text-xl lg:text-2xl">
                  <div className="bg-gradient-to-r from-blue-600 to-indigo-600 p-2 rounded-lg">
                    <Upload className="h-5 w-5 lg:h-6 lg:w-6 text-white" />
                  </div>
                  Upload Images
                </CardTitle>
                <CardDescription className="text-base text-gray-600">
                  Select one or more images to compress. Supports JPEG, PNG, and WebP formats.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4 lg:space-y-6">
                <div
                  className="border-2 border-dashed border-gray-300 rounded-xl p-8 lg:p-12 text-center hover:border-blue-400 hover:bg-blue-50/50 transition-all duration-300 cursor-pointer group"
                  onClick={() => fileInputRef.current?.click()}
                >
                  <div className="bg-gradient-to-r from-blue-100 to-indigo-100 w-16 h-16 lg:w-20 lg:h-20 rounded-full flex items-center justify-center mx-auto mb-4 lg:mb-6 group-hover:scale-110 transition-transform duration-300">
                    <ImageIcon className="h-8 w-8 lg:h-10 lg:w-10 text-blue-600" />
                  </div>
                  <p className="text-lg lg:text-xl font-semibold text-gray-700 mb-2">Click to select images</p>
                  <p className="text-gray-500 text-sm lg:text-base">or drag and drop your files here</p>
                </div>
                
                <input
                  ref={fileInputRef}
                  type="file"
                  accept="image/*"
                  multiple
                  onChange={handleFileSelect}
                  className="hidden"
                />
                
                {selectedFiles.length > 0 && (
                  <div className="space-y-3 lg:space-y-4">
                    <p className="font-semibold text-lg text-gray-800">{selectedFiles.length} file(s) selected:</p>
                    <div className="grid gap-2 lg:gap-3 max-h-60 overflow-y-auto">
                      {selectedFiles.map((file, index) => (
                        <div key={index} className="flex items-center justify-between p-3 lg:p-4 bg-gradient-to-r from-gray-50 to-gray-100 rounded-lg border">
                          <div className="flex items-center gap-3">
                            <FileImage className="h-5 w-5 text-gray-500" />
                            <span className="text-sm lg:text-base font-medium text-gray-700 truncate">{file.name}</span>
                          </div>
                          <Badge variant="secondary" className="bg-blue-100 text-blue-700 border-blue-200">
                            {formatFileSize(file.size)}
                          </Badge>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Compression Settings */}
            <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm">
              <CardHeader className="pb-4">
                <CardTitle className="flex items-center gap-3 text-xl lg:text-2xl">
                  <div className="bg-gradient-to-r from-purple-600 to-pink-600 p-2 rounded-lg">
                    <Zap className="h-5 w-5 lg:h-6 lg:w-6 text-white" />
                  </div>
                  Compression Settings
                </CardTitle>
                <CardDescription className="text-base text-gray-600">
                  Adjust the quality level to balance file size and image quality.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div className="flex justify-between items-center">
                    <label className="text-base lg:text-lg font-semibold text-gray-700">Quality Level</label>
                    <div className="flex items-center gap-2">
                      <Badge variant="outline" className="text-lg font-bold px-3 py-1">
                        {Math.round(quality[0] * 100)}%
                      </Badge>
                    </div>
                  </div>
                  <div className="px-2">
                    <Slider
                      value={quality}
                      onValueChange={setQuality}
                      max={1}
                      min={0.1}
                      step={0.1}
                      className="w-full"
                    />
                    <div className="flex justify-between text-sm text-gray-500 mt-2">
                      <span>Smaller file</span>
                      <span>Better quality</span>
                    </div>
                  </div>
                </div>
                
                <Button
                  onClick={handleCompress}
                  disabled={selectedFiles.length === 0 || isCompressing}
                  className="w-full h-12 lg:h-14 text-base lg:text-lg font-semibold bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 transition-all duration-300"
                  size="lg"
                >
                  {isCompressing ? (
                    <>
                      <Clock className="h-5 w-5 mr-3 animate-spin" />
                      Compressing...
                    </>
                  ) : (
                    <>
                      <Zap className="h-5 w-5 mr-3" />
                      Compress Images
                    </>
                  )}
                </Button>
                
                {isCompressing && (
                  <div className="space-y-3">
                    <Progress value={progress} className="w-full h-3" />
                    <p className="text-base text-center text-gray-600 font-medium">
                      {Math.round(progress)}% complete
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Results Section */}
            {compressedImages.length > 0 && (
              <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm">
                <CardHeader className="pb-4">
                  <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4">
                    <div>
                      <CardTitle className="flex items-center gap-3 text-xl lg:text-2xl">
                        <div className="bg-gradient-to-r from-green-600 to-emerald-600 p-2 rounded-lg">
                          <Download className="h-5 w-5 lg:h-6 lg:w-6 text-white" />
                        </div>
                        Compressed Images
                      </CardTitle>
                      <CardDescription className="text-base text-gray-600 mt-2">
                        Your images have been successfully compressed.
                      </CardDescription>
                    </div>
                    <Button 
                      onClick={downloadAll} 
                      variant="outline" 
                      className="h-10 lg:h-12 px-6 font-semibold border-2 hover:bg-green-50 hover:border-green-300"
                    >
                      <Download className="h-4 w-4 mr-2" />
                      Download All
                    </Button>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid gap-4 lg:gap-6">
                    {compressedImages.map((image, index) => (
                      <div key={index} className="border border-gray-200 rounded-xl p-4 lg:p-6 bg-gradient-to-r from-gray-50 to-white">
                        <div className="flex flex-col lg:flex-row gap-4 lg:gap-6">
                          <div className="flex-shrink-0">
                            <img
                              src={image.dataUrl}
                              alt={`Compressed ${image.originalFile.name}`}
                              className="w-32 h-32 lg:w-40 lg:h-40 object-cover rounded-lg shadow-md border-2 border-white"
                            />
                          </div>
                          <div className="flex-1 space-y-3 lg:space-y-4">
                            <h4 className="font-semibold text-lg lg:text-xl text-gray-800 truncate">{image.originalFile.name}</h4>
                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 lg:gap-4">
                              <div className="bg-white p-3 lg:p-4 rounded-lg border">
                                <span className="text-sm text-gray-500 block mb-1">Original size:</span>
                                <span className="font-bold text-base lg:text-lg text-gray-800">{formatFileSize(image.originalSize)}</span>
                              </div>
                              <div className="bg-white p-3 lg:p-4 rounded-lg border">
                                <span className="text-sm text-gray-500 block mb-1">Compressed size:</span>
                                <span className="font-bold text-base lg:text-lg text-green-600">{formatFileSize(image.compressedSize)}</span>
                              </div>
                            </div>
                            <div className="flex flex-col sm:flex-row gap-3 lg:gap-4">
                              <Badge variant="secondary" className="bg-green-100 text-green-700 border-green-200 px-3 py-2 text-sm lg:text-base font-semibold">
                                {image.compressionRatio.toFixed(1)}% reduction
                              </Badge>
                              <Button
                                onClick={() => downloadImage(image)}
                                size="sm"
                                variant="outline"
                                className="h-9 lg:h-10 px-4 font-semibold hover:bg-blue-50 hover:border-blue-300"
                              >
                                <Download className="h-4 w-4 mr-2" />
                                Download
                              </Button>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        </section>

        {/* Middle Ad Space */}
        <section className="my-12 lg:my-16 text-center">
          <AdSenseAd 
            adSlot="0987654321" 
            adFormat="rectangle"
            className="max-w-xl mx-auto"
          />
        </section>

        <Separator className="my-12 lg:my-16" />

        {/* Features Section */}
        <section className="py-12">
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold mb-4">Why Choose Our Image Compressor?</h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              Experience the fastest and most reliable image compression tool with advanced features
              designed for professionals and everyday users alike.
            </p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {features.map((feature, index) => (
              <Card key={index} className="hover:shadow-lg transition-shadow duration-300">
                <CardHeader className="text-center">
                  <div className="flex justify-center mb-4">
                    {feature.icon}
                  </div>
                  <CardTitle className="text-xl">{feature.title}</CardTitle>
                </CardHeader>
                <CardContent>
                  <CardDescription className="text-center text-base">
                    {feature.description}
                  </CardDescription>
                </CardContent>
              </Card>
            ))}
          </div>
        </section>

        <Separator className="my-12 lg:my-16" />

        {/* FAQ Section */}
        <section className="py-12">
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold mb-4">Frequently Asked Questions</h2>
            <p className="text-lg text-gray-600">
              Find answers to common questions about our image compression tool
            </p>
          </div>
          
          <div className="max-w-3xl mx-auto">
            <Accordion type="single" collapsible className="w-full">
              {faqs.map((faq, index) => (
                <AccordionItem key={index} value={`item-${index}`}>
                  <AccordionTrigger className="text-left">
                    {faq.question}
                  </AccordionTrigger>
                  <AccordionContent className="text-gray-600">
                    {faq.answer}
                  </AccordionContent>
                </AccordionItem>
              ))}
            </Accordion>
          </div>
        </section>

        {/* Bottom Ad Space */}
        <section className="my-12 lg:my-16 text-center">
          <AdSenseAd 
            adSlot="1122334455" 
            className="max-w-2xl mx-auto"
          />
        </section>

        {/* About Section for SEO */}
        <section className="py-12 lg:py-16 text-center">
          <div className="max-w-4xl mx-auto">
            <h2 className="text-2xl lg:text-3xl font-bold mb-6 lg:mb-8 text-gray-900">About Our Image Compression Tool</h2>
            <div className="text-base lg:text-lg text-gray-600 space-y-4 lg:space-y-6 text-left leading-relaxed">
              <p>
                Our advanced image compression tool helps you reduce image file sizes without compromising quality. 
                Whether you're a web developer looking to optimize images for faster loading times, a photographer 
                managing large image libraries, or someone who needs to compress images for email or social media, 
                our tool provides the perfect solution.
              </p>
              <p>
                The compression process happens entirely in your browser using cutting-edge algorithms, ensuring 
                your images remain private and secure. No uploads, no downloads to external servers – just fast, 
                efficient compression that you can trust.
              </p>
              <p>
                Features include batch processing for multiple images, customizable quality settings, support for 
                all major image formats (JPEG, PNG, WebP), and instant download of compressed images. Perfect for 
                SEO optimization, website performance, and reducing storage costs.
              </p>
            </div>
          </div>
        </section>
      </main>

      {/* Footer */}
      <footer className="bg-gray-900 text-white py-12 lg:py-16">
        <div className="container mx-auto px-4 lg:px-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 lg:gap-12">
            <div>
              <div className="flex items-center space-x-3 mb-4 lg:mb-6">
                <div className="bg-gradient-to-r from-blue-600 to-indigo-600 p-3 rounded-xl">
                  <ImageIcon className="h-6 w-6 text-white" />
                </div>
                <span className="text-xl lg:text-2xl font-bold">Image Compressor</span>
              </div>
              <p className="text-gray-400 leading-relaxed">
                The fastest and most reliable online image compression tool. 
                Compress images while maintaining quality.
              </p>
            </div>
            
            <div>
              <h3 className="text-lg lg:text-xl font-semibold mb-4 lg:mb-6">Features</h3>
              <ul className="space-y-2 lg:space-y-3 text-gray-400">
                <li>• Batch image compression</li>
                <li>• Multiple format support</li>
                <li>• Privacy-first approach</li>
                <li>• Mobile-friendly design</li>
                <li>• Free forever</li>
              </ul>
            </div>
            
            <div>
              <h3 className="text-lg lg:text-xl font-semibold mb-4 lg:mb-6">Supported Formats</h3>
              <ul className="space-y-2 lg:space-y-3 text-gray-400">
                <li>• JPEG / JPG images</li>
                <li>• PNG images</li>
                <li>• WebP images</li>
                <li>• High-resolution photos</li>
                <li>• Transparent images</li>
              </ul>
            </div>
          </div>
          
          <Separator className="my-8 lg:my-12 bg-gray-700" />
          
          <div className="text-center text-gray-400">
            <p className="text-base lg:text-lg">&copy; 2024 Image Compressor Tool. All rights reserved.</p>
            <p className="mt-2 text-sm lg:text-base">Compress images online for free with our advanced compression technology.</p>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default Index;
